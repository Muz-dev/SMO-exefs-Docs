{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the SMO exefs modding guide! This page aimes to help teach people how to create mods for the exefs of Super Mario Odyssey. This guide will walk you through each stage teaching you how to do each part and at the ned will assign you a project that you can try to make using all of your skill that you have learn whilst following this guide!","title":"Home"},{"location":"#welcome-to-the-smo-exefs-modding-guide","text":"This page aimes to help teach people how to create mods for the exefs of Super Mario Odyssey. This guide will walk you through each stage teaching you how to do each part and at the ned will assign you a project that you can try to make using all of your skill that you have learn whilst following this guide!","title":"Welcome to the SMO exefs modding guide!"},{"location":"Setupmod/","text":"Setting Up Our First Mod To write our first exefs mod we need a base. A base is a c++ project that has been configured to compile into a binary file to mod the main executable. The base that we are going to use for this is smo-exlaunch-base-clang. For people that are on windows or linux we can use the base repo linked here smo-exlaunch-base-clang . However if you are on mac then you need to use a old version of the repo modified to work with MacOS linked here smo-exlaunch-base-clang . Make sure to clone the repo recursivly with --recursive after the url! As you should be able to see in the repo there are two tools required to use this base. CMake and Ninja. The rest are downloaded for you. You can download cmake and Ninja on windows with winget, port (macports) on MacOS and your distros package manager on linux. Now to test that you can compile your code open a terminal in the directory that you cloned smo-exlaunch-base-clang into. Now type \"cmake -S . -B build -G Ninja --toolchain=cmake/toolchain.cmake\" if you did everything before correctly it should start to download the required tools for the base. Once thats done you can run \"ninja -C build\" and it will be compiled. Setting up ghidra When we code our mods we need to symbol to hook onto, this will be explained for later on. We can find these symbol's in ghidra, a decompiler. First download it from here Ghidra . Next download the ghidra switch loader from here Ghidra Switch Loader . Now that you have downloaded ghidra extract it and run it. Once ghidra has launched press file then install extensions then the plus icon in the top corner, Now select the ghidra switch loader zip file and press install. Now we need to extract the exefs from the rom for ghidra. The easiest way to do this is to dump your 1.0.0 rom from your switch using nxdumptool. Download nxdump tool from the homebrew app store or github (if you choose github then make sure to copy it to the switch folder!) Now open the homebrew launcher and launch nxdumptool, then select user titles menu -> 01000...10000 -> nsp dump options -> dump base application -> start nsp dump. Once thats done connect your switch to your pc and go to the sd card then open the nxdt_rw_proc/nsp then copy the Super Mario Odyssey folder to somewhere on your pc that you will be able to find. Now download file joiner from file-joiner and extract it and run it, if you on MacOS or linux then use wine. Now select add a folder and select the Super Mario Odyssey folder. Then join. In the Super Mario Odyssey folder there will now be a new file in there. It should be around 5.2 Gb rename that file to \"Super Mario Odyssey.nsp\". Now go back to your switch sd card on your pc and download lockpick_rcm.bin and copy it to the bootloader/payloads folder on your switch. Now eject your switch sd card and (if your not already) reboot to hekate and select the payloads tab then lockpick_rcm.bin. Once in the menu use the power button to select \"Dump from sysnand\". Once you've done that use the volume buttons to navigate to reboot to hekate and then connect your sd card to your pc (or do whatever you do to connect your switch to your pc). Go into the switch folder and copy the prod.keys to somehwere on your pc. Now, Launch download and launch ryujinx. At the top of the screen click file then open ryujinx folder. Now copy prod.keys to the system folder found when opening the ryujinx folder. Now exit back into ryujinx and select options -> settings. Now press add and select the folder with the Super Mario Odyssey.nsp file. Then press ok. Now open your file explorer and create a new folder called exefs. Now go back to ryujinx and right click Super Mario Odyssey (If it doesnt show up then press the reload button in the bottom left corner) and press extract data -> ExeFs then select the exefs folder that you created before. Then it will say extracting data and the exefs will have been extracted to a folder, It should only take a moment. Now that's done you can close out of ryujinx, we are ready to start using ghidra and coding the mod","title":"Setting Up"},{"location":"Setupmod/#setting-up-our-first-mod","text":"To write our first exefs mod we need a base. A base is a c++ project that has been configured to compile into a binary file to mod the main executable. The base that we are going to use for this is smo-exlaunch-base-clang. For people that are on windows or linux we can use the base repo linked here smo-exlaunch-base-clang . However if you are on mac then you need to use a old version of the repo modified to work with MacOS linked here smo-exlaunch-base-clang . Make sure to clone the repo recursivly with --recursive after the url! As you should be able to see in the repo there are two tools required to use this base. CMake and Ninja. The rest are downloaded for you. You can download cmake and Ninja on windows with winget, port (macports) on MacOS and your distros package manager on linux. Now to test that you can compile your code open a terminal in the directory that you cloned smo-exlaunch-base-clang into. Now type \"cmake -S . -B build -G Ninja --toolchain=cmake/toolchain.cmake\" if you did everything before correctly it should start to download the required tools for the base. Once thats done you can run \"ninja -C build\" and it will be compiled.","title":"Setting Up Our First Mod"},{"location":"Setupmod/#setting-up-ghidra","text":"When we code our mods we need to symbol to hook onto, this will be explained for later on. We can find these symbol's in ghidra, a decompiler. First download it from here Ghidra . Next download the ghidra switch loader from here Ghidra Switch Loader . Now that you have downloaded ghidra extract it and run it. Once ghidra has launched press file then install extensions then the plus icon in the top corner, Now select the ghidra switch loader zip file and press install. Now we need to extract the exefs from the rom for ghidra. The easiest way to do this is to dump your 1.0.0 rom from your switch using nxdumptool. Download nxdump tool from the homebrew app store or github (if you choose github then make sure to copy it to the switch folder!) Now open the homebrew launcher and launch nxdumptool, then select user titles menu -> 01000...10000 -> nsp dump options -> dump base application -> start nsp dump. Once thats done connect your switch to your pc and go to the sd card then open the nxdt_rw_proc/nsp then copy the Super Mario Odyssey folder to somewhere on your pc that you will be able to find. Now download file joiner from file-joiner and extract it and run it, if you on MacOS or linux then use wine. Now select add a folder and select the Super Mario Odyssey folder. Then join. In the Super Mario Odyssey folder there will now be a new file in there. It should be around 5.2 Gb rename that file to \"Super Mario Odyssey.nsp\". Now go back to your switch sd card on your pc and download lockpick_rcm.bin and copy it to the bootloader/payloads folder on your switch. Now eject your switch sd card and (if your not already) reboot to hekate and select the payloads tab then lockpick_rcm.bin. Once in the menu use the power button to select \"Dump from sysnand\". Once you've done that use the volume buttons to navigate to reboot to hekate and then connect your sd card to your pc (or do whatever you do to connect your switch to your pc). Go into the switch folder and copy the prod.keys to somehwere on your pc. Now, Launch download and launch ryujinx. At the top of the screen click file then open ryujinx folder. Now copy prod.keys to the system folder found when opening the ryujinx folder. Now exit back into ryujinx and select options -> settings. Now press add and select the folder with the Super Mario Odyssey.nsp file. Then press ok. Now open your file explorer and create a new folder called exefs. Now go back to ryujinx and right click Super Mario Odyssey (If it doesnt show up then press the reload button in the bottom left corner) and press extract data -> ExeFs then select the exefs folder that you created before. Then it will say extracting data and the exefs will have been extracted to a folder, It should only take a moment. Now that's done you can close out of ryujinx, we are ready to start using ghidra and coding the mod","title":"Setting up ghidra"},{"location":"firstmod/","text":"Actually creating the mod Now its time to do some coding! Lets write our first mod for Super Mario Odyssey! First open up the base that we downloaded in your ide of choice. Then navigate to to the main.cpp file found in the user/src folder. In the main.cpp file you will see alot of code already, This is for the logging feature, dont remove it. Now lets open ghidra and start the hard part, Looking for the function or symbol to hook onto. In ghidra press file and new project, You can name it whatever you want. Once you have created a new project press file again then import file, Navigate to the exefs folder we created before and select main. When you select it ghidra will automatically detect that it is a nintendo switch binary if you installed the switch loader correctly. Once it has imported the main file double click it and ghidra will open the decompiler. When it has loaded ghidra will ask you to analyse the file press yes and select the option at the top \"(Switch) IPC Analyzer\" then press Analyze. It will take a while so just be patient once its done then you will know because there will be nothing going on in the bottom right corner. Now this is what we use ghidra for. Ghidra is used to search through the code so we can find where we want to hook. For this mod we are going to make a simple mod that increases the speed of mario after you collect a moon. So we need to look through ghidra to find the hook for when you collect a moon.","title":"Actually creating the mod"},{"location":"firstmod/#actually-creating-the-mod","text":"Now its time to do some coding! Lets write our first mod for Super Mario Odyssey! First open up the base that we downloaded in your ide of choice. Then navigate to to the main.cpp file found in the user/src folder. In the main.cpp file you will see alot of code already, This is for the logging feature, dont remove it. Now lets open ghidra and start the hard part, Looking for the function or symbol to hook onto. In ghidra press file and new project, You can name it whatever you want. Once you have created a new project press file again then import file, Navigate to the exefs folder we created before and select main. When you select it ghidra will automatically detect that it is a nintendo switch binary if you installed the switch loader correctly. Once it has imported the main file double click it and ghidra will open the decompiler. When it has loaded ghidra will ask you to analyse the file press yes and select the option at the top \"(Switch) IPC Analyzer\" then press Analyze. It will take a while so just be patient once its done then you will know because there will be nothing going on in the bottom right corner. Now this is what we use ghidra for. Ghidra is used to search through the code so we can find where we want to hook. For this mod we are going to make a simple mod that increases the speed of mario after you collect a moon. So we need to look through ghidra to find the hook for when you collect a moon.","title":"Actually creating the mod"},{"location":"learncpp/","text":"Learning C++ that will be used for modding As you may know, most games in the modern era are coded in C++ and Super Mario Odyssey is no exception. Super mario Odyssey in written completely in C++, so to mod it, we are going to need to be able to write in C++. Note This guide assumes that you already know basic C++. If you don't then I recommend you read about these things as it will make this a lot easier: Pointres References, Classes, Structs and calling functions. If not then I highly recommend you read through the site learncpp.com Anyways, let's begin! Pointers The first thing we are going to talk about is Pointers. There isn't much to say about pointers apart from smo exefs uses alot of it so get used to using pointers and references Structs and Classes The next thing is structs and Classes. These are used all over the game to store values specific to certain objects. Make a program that declares a Structure and create an object for that structure. Now print all of the objects in that structure. Putting them together Now that you can use structures and pointers let's put them together! Start by creating a project with a structure. Now create an object of that structure. Now, reference that structure using <yourstructname>& referenceobj = <youoriginalobj> Now print the contents of the reference object. Conclusion Now that you can do this we can start to code our first exefs mod! We'll start basic but by the end you should be able to code some incredible exefs mods. Let's begin.","title":"Learning cpp"},{"location":"learncpp/#learning-c-that-will-be-used-for-modding","text":"As you may know, most games in the modern era are coded in C++ and Super Mario Odyssey is no exception. Super mario Odyssey in written completely in C++, so to mod it, we are going to need to be able to write in C++. Note This guide assumes that you already know basic C++. If you don't then I recommend you read about these things as it will make this a lot easier: Pointres References, Classes, Structs and calling functions. If not then I highly recommend you read through the site learncpp.com Anyways, let's begin!","title":"Learning C++ that will be used for modding"},{"location":"learncpp/#pointers","text":"The first thing we are going to talk about is Pointers. There isn't much to say about pointers apart from smo exefs uses alot of it so get used to using pointers and references","title":"Pointers"},{"location":"learncpp/#structs-and-classes","text":"The next thing is structs and Classes. These are used all over the game to store values specific to certain objects. Make a program that declares a Structure and create an object for that structure. Now print all of the objects in that structure.","title":"Structs and Classes"},{"location":"learncpp/#putting-them-together","text":"Now that you can use structures and pointers let's put them together! Start by creating a project with a structure. Now create an object of that structure. Now, reference that structure using <yourstructname>& referenceobj = <youoriginalobj> Now print the contents of the reference object.","title":"Putting them together"},{"location":"learncpp/#conclusion","text":"Now that you can do this we can start to code our first exefs mod! We'll start basic but by the end you should be able to code some incredible exefs mods. Let's begin.","title":"Conclusion"}]}